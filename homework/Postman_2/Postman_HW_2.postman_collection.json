{
	"info": {
		"_postman_id": "af4e5c56-1f0c-4e6e-80c9-9e348d51a6c5",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19993837"
	},
	"item": [
		{
			"name": "№ 1, first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "№ 2, user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// variables\r",
							"var reqData = request.data;// Спарсили данные запроса в переменную\r",
							"let jsonData = pm.response.json(); //3. Спарсить response body в json.(То есть взяли данные в формате JSON из овета)\r",
							"let req_age = reqData.age; // спарсили данные запроса (reqData) а конкретно значение age\r",
							"let req_name = reqData.name; // спарсили данные запроса (reqData) а конкретно значение name\r",
							"let req_salary = +(reqData.salary);\r",
							"let req_salary_1_5 = +(reqData.salary * 4)\r",
							"\r",
							"\r",
							"//cod\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// parsing\r",
							"pm.test(\"good req_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"pm.test(\"good req_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"pm.test(\"good req_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"pm.test(\"good req_salary 1.5\", function () {\r",
							"    pm.expect(jsonData.salary * 4).to.eql(req_salary_1_5);\r",
							"})\r",
							"console.log(jsonData.family) //11. Вывести в консоль параметр family из response. \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Jeronimo",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "№ 3, object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//variables\r",
							"let reqData = pm.request.url.query.toObject(); //2. Спарсить request. request на GET парситься отлично от Post \r",
							"let respData = pm.response.json(); //1. Спарсить response body в json.\r",
							"let reqName = reqData.name;\r",
							"let reqAge = reqData.age;\r",
							"let reqSalary = +reqData.salary;\r",
							"let respFamily = respData.family;\r",
							"let respDog = respData.family.pets.dog;\r",
							"\r",
							"//code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Req_name_ok\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqName); //проверяем что ответное имя соотвествует запрашиваемому\r",
							"});\r",
							"pm.test(\"Req_age_ok\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqAge); //проверяем что ответный возраст соотвествует запрашиваемому\r",
							"});\r",
							"pm.test(\"Req_salary_ok\", function () {\r",
							"    pm.expect(respData.salary).to.eql(reqSalary); //проверяем что ответная зарплата соотвествует запрашиваемомой\r",
							"});\r",
							"pm.test(\"Dog have name\", function() {\r",
							"    pm.expect(respDog).to.have.property(\"name\"); //проверяем что в ответе у параметра dog есть ключь name\r",
							"})\r",
							"pm.test(\"Dog have age\", function() {\r",
							"    pm.expect(respDog).to.have.property(\"age\"); //проверяем что в ответе у параметра dog есть ключь age\r",
							"})\r",
							"pm.test(\"Dog name ok\", function() {\r",
							"    pm.expect(respDog.name).to.eql(\"Luky\"); //проверяем что в ответе имя собаки равно luky\r",
							"})\r",
							"pm.test(\"Dog age ok\", function() {\r",
							"    pm.expect(respDog.age).to.have.eql(4); //проверяем что в ответе возраст собаки равен 4\r",
							"})\r",
							"\r",
							"//console log\r",
							"console.log(respFamily)\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Amiram&age=27&salary=10000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Amiram"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "№ 4, object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respJson = pm.response.json(); //3. Спарсить response body в json.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"let reqName = reqData.name;\r",
							"let salaryData = respJson.salary;\r",
							"\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Name is ok\", function(){\r",
							"    pm.expect(respJson.name).to.eql(reqData.name);\r",
							"})\r",
							"pm.test(\"Age is ok\", function() {\r",
							"    pm.expect(respJson.age).to.eql(+reqData.age);\r",
							"})\r",
							"console.log(reqData.salary)\r",
							"console.log(respJson.salary)\r",
							"console.log(respJson.salary[0])\r",
							"console.log(respJson.salary[1])\r",
							"console.log(respJson.salary[2])\r",
							"\r",
							"pm.test(\"Salary 0 is ok\", function() {\r",
							"    pm.expect(respJson.salary[0]).to.eql(+reqData.salary);\r",
							"})\r",
							"pm.test(\"Salary 1 is ok\", function() {\r",
							"    pm.expect(+respJson.salary[1]).to.eql(reqData.salary*2);\r",
							"})\r",
							"pm.test(\"Salary 2 is ok\", function() {\r",
							"    pm.expect(respJson.salary[2]).to.eql(String(reqData.salary*3));\r",
							"})\r",
							"for (let i = 0; i < 3; i++){\r",
							"    console.log(salaryData[i])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Amiram&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Amiram"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "№ 5, user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resData = pm.response.json();\r",
							"let reqData = request.data;\r",
							"\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Response have start_qa_salary\", function() {\r",
							"    pm.expect(resData).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"pm.test(\"response have qa_salary_after_6_months\", function() {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"pm.test(\"response have qa_salary_after_12_months\", function() {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"pm.test(\"response have qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"pm.test(\"response have qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"pm.test(\"response have person\", function() {\r",
							"    pm.expect(resData).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"pm.test(\"start_qa_salary is ok\", function() {\r",
							"    pm.expect(resData.start_qa_salary).to.eql(+reqData.salary)\r",
							"})\r",
							"pm.test(\"qa_salary_after_6_months is ok\", function() {\r",
							"    pm.expect(resData.qa_salary_after_6_months).to.eql(+reqData.salary*2)\r",
							"})\r",
							"pm.test(\"qa_salary_after_12_months is ok\", function() {\r",
							"    pm.expect(resData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7)\r",
							"})\r",
							"pm.test(\"qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(resData.qa_salary_after_1/.5_year).to.eql(+reqData.salary*3.3)\r",
							"})\r",
							"\r",
							"// console.log(reqData.name)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}